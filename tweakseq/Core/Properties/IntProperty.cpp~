// screenhack - a 3D animation system for Renderman-compatible renderers
// Copyright (C) 2004  Michael Wouters

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// Modification history
// 07-11-2007 MJW First version
//
#include <QtDebug>
#include "DebuggingInfo.h"

#include <QtXml>

#include "IntProperty.h"
#include "XMLHelper.h"

IntProperty::IntProperty(int *theInt,
	Propertied *o,std::string propertyName,int val,int min,int max,int s):
	Property(o,propertyName,Property::IntV,s)
{
	init();
	if (theInt)
		theInt_=theInt;
	else
	{
		theInt_= new int;
		*theInt_=val;
		setLocalStorage(true);
	}

	min_=min;
	max_=max;
}

IntProperty::IntProperty(IntProperty *prop):Property()
{
	*this=*prop;
	if (usesLocalStorage())
	{
		theInt_= new int;
		*theInt_= *(prop->theInt_);
	}
}

IntProperty::IntProperty(int *theInt,Propertied *o,
	QDomElement &elem,int min,int max,int s):
	Property(o,"",Property::IntV,s)
{
	init();
	
	min_=min;
	max_=max;

	if (theInt)
		theInt_=theInt;
	else
	{
		theInt_= new int;
		setLocalStorage(true);
	}
		
	QString sbuf;
	if (XMLHelper::stringAttribute(elem,"name",&sbuf))
		setName(sbuf.toStdString());
	*theInt_= elem.text().toInt();
}

IntProperty::~IntProperty()
{
	if (usesLocalStorage() && theInt_) delete theInt_;
}

void IntProperty::saveXML(QDomDocument &doc,QDomElement &elem)
{
	QStringList attr;
	attr << "type" << "name";
	QStringList vals;
	vals << "int" << name().c_str();
	if (!enumerated_)
		XMLHelper::addElement(doc,elem,"property",QString::number(*theInt_),attr,vals);
	else
		XMLHelper::addElement(doc,elem,"property",*theInt_,attr,vals);
}

void IntProperty::saveValue()
{
	saved_=*theInt_;
	last_=*theInt_;
	setChanged(false);
}

void IntProperty::restoreSavedValue()
{
	if (*theInt_ == saved_) return;
	(*theInt_)=saved_;
}

void IntProperty::setValue(int val)
{
	if (val==*theInt_) return; // didn't change so no need to shout it out
	*theInt_=val;
	notifyDependers(); // this sets the value of changed() 
}

void  IntProperty::setRange(int minVal,int maxVal)
{
	min_=minVal;
	max_=maxVal;
}

int IntProperty::min()
{
	return min_;
}

int IntProperty::max()
{
	return max_;
}

void IntProperty::setEnumerations(QList<int> &values,QList<QString> &descriptions)
{
	enumValues_=values;
	enumDescriptions_=descriptions;
}

int IntProperty::enumValue(int idx)
{
	if (idx <0 || idx >= enumValues_.size()) return -9999999;
	return enumValues_.at(idx);
}

QString IntProperty::enumDescription(int idx)
{
	if (idx <0 || idx >= enumDescriptions_.size()) return QString("unknown");
	return enumDescriptions_.at(idx);
}

QString IntProperty::descriptionFromEnum(int e)
{
	for (int i=0;i<enumValues_.size();i++)
		if ( enumValues_.at(i) == e)
			return enumDescriptions_.at(i);
	return "Unknown";
}

int IntProperty::enumFromDescription(QString d)
{
	for (int i=0;i<enumDescriptions_.size();i++)
		if ( enumDescriptions_.at(i) == d )
			return enumValues_.at(i);
	return -1;
}

//
//
//

void IntProperty::init()
{
	theInt_=NULL;
	enumerated_=false;
}
